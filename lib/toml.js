/* parser generated by jison 0.4.2 */
var toml = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"lines":4,"line":5,"comment":6,"keygroup":7,"assignment":8,"EOF":9,"COMMENT":10,"identifier":11,"EQUALS":12,"value":13,"IDENTIFIER":14,"[":15,"keygroupid":16,"]":17,".":18,"string":19,"float":20,"integer":21,"bool":22,"datetime":23,"array":24,"TRIPLESTR":25,"STR":26,"DATETIME":27,"INTEGER":28,"-":29,"FLOAT":30,"strarray":31,"floatarray":32,"integerarray":33,"boolarray":34,"datetimearray":35,"arrayarray":36,",":37,"TRUE":38,"FALSE":39,"$accept":0,"$end":1},
terminals_: {2:"error",9:"EOF",10:"COMMENT",12:"EQUALS",14:"IDENTIFIER",15:"[",17:"]",18:".",25:"TRIPLESTR",26:"STR",27:"DATETIME",28:"INTEGER",29:"-",30:"FLOAT",37:",",38:"TRUE",39:"FALSE"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[5,1],[5,2],[6,1],[8,3],[11,1],[7,3],[16,1],[16,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[19,1],[19,1],[23,1],[21,1],[21,2],[20,1],[20,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[31,1],[31,3],[31,2],[32,1],[32,3],[32,2],[33,1],[33,3],[33,2],[34,1],[34,3],[34,2],[35,1],[35,3],[35,2],[36,1],[36,3],[36,2],[22,1],[22,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return this.toml.data; 
break;
case 2: this.$ = $$[$0] 
break;
case 9: this.toml = set(this.toml, $$[$0-2], $$[$0]); 
break;
case 10: this.$ = $$[$0] 
break;
case 11: this.toml = setCurrentGroup(this.toml, $$[$0-1]); 
break;
case 20: this.$ = parseTripleString($$[$0]) 
break;
case 21: this.$ = parseString($$[$0]) 
break;
case 22: this.$ = new Date($$[$0]) 
break;
case 23: this.$ = parseInt($$[$0], 10); 
break;
case 24: this.$ = $$[$0] * -1 
break;
case 25: this.$ = parseFloat($$[$0], 10); 
break;
case 26: this.$ = $$[$0] * -1 
break;
case 27: this.$ = $$[$0-1] 
break;
case 28: this.$ = $$[$0-1] 
break;
case 29: this.$ = $$[$0-1] 
break;
case 30: this.$ = $$[$0-1] 
break;
case 31: this.$ = $$[$0-1] 
break;
case 32: this.$ = $$[$0-1] 
break;
case 33: this.$ = [$$[$0]] 
break;
case 34: $$[$0-2].push($$[$0]) 
break;
case 36: this.$ = [$$[$0]] 
break;
case 37: $$[$0-2].push($$[$0]) 
break;
case 39: this.$ = [$$[$0]] 
break;
case 40: $$[$0-2].push($$[$0]) 
break;
case 42: this.$ = [$$[$0]] 
break;
case 43: $$[$0-2].push($$[$0]) 
break;
case 45: this.$ = [$$[$0]] 
break;
case 46: $$[$0-2].push($$[$0]) 
break;
case 48: this.$ = [$$[$0]] 
break;
case 49: $$[$0-2].push($$[$0]) 
break;
case 51: this.$ = true; 
break;
case 52: this.$ = false; 
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:5,8:6,10:[1,7],11:9,14:[1,10],15:[1,8]},{1:[3]},{1:[2,1],5:11,6:4,7:5,8:6,10:[1,7],11:9,14:[1,10],15:[1,8]},{1:[2,2],9:[1,12],10:[2,2],14:[2,2],15:[2,2]},{1:[2,4],9:[2,4],10:[2,4],14:[2,4],15:[2,4]},{1:[2,5],9:[2,5],10:[2,5],14:[2,5],15:[2,5]},{1:[2,6],9:[2,6],10:[2,6],14:[2,6],15:[2,6]},{1:[2,8],9:[2,8],10:[2,8],14:[2,8],15:[2,8]},{11:14,14:[1,10],16:13},{12:[1,15]},{12:[2,10],17:[2,10],18:[2,10]},{1:[2,3],9:[1,12],10:[2,3],14:[2,3],15:[2,3]},{1:[2,7],9:[2,7],10:[2,7],14:[2,7],15:[2,7]},{17:[1,16],18:[1,17]},{17:[2,12],18:[2,12]},{13:18,15:[1,33],19:19,20:20,21:21,22:22,23:23,24:24,25:[1,25],26:[1,26],27:[1,32],28:[1,29],29:[1,28],30:[1,27],38:[1,30],39:[1,31]},{1:[2,11],9:[2,11],10:[2,11],14:[2,11],15:[2,11]},{11:34,14:[1,10]},{1:[2,9],9:[2,9],10:[2,9],14:[2,9],15:[2,9]},{1:[2,14],9:[2,14],10:[2,14],14:[2,14],15:[2,14]},{1:[2,15],9:[2,15],10:[2,15],14:[2,15],15:[2,15]},{1:[2,16],9:[2,16],10:[2,16],14:[2,16],15:[2,16]},{1:[2,17],9:[2,17],10:[2,17],14:[2,17],15:[2,17]},{1:[2,18],9:[2,18],10:[2,18],14:[2,18],15:[2,18]},{1:[2,19],9:[2,19],10:[2,19],14:[2,19],15:[2,19]},{1:[2,20],9:[2,20],10:[2,20],14:[2,20],15:[2,20],17:[2,20],37:[2,20]},{1:[2,21],9:[2,21],10:[2,21],14:[2,21],15:[2,21],17:[2,21],37:[2,21]},{1:[2,25],9:[2,25],10:[2,25],14:[2,25],15:[2,25],17:[2,25],37:[2,25]},{20:35,21:36,28:[1,29],29:[1,28],30:[1,27]},{1:[2,23],9:[2,23],10:[2,23],14:[2,23],15:[2,23],17:[2,23],37:[2,23]},{1:[2,51],9:[2,51],10:[2,51],14:[2,51],15:[2,51],17:[2,51],37:[2,51]},{1:[2,52],9:[2,52],10:[2,52],14:[2,52],15:[2,52],17:[2,52],37:[2,52]},{1:[2,22],9:[2,22],10:[2,22],14:[2,22],15:[2,22],17:[2,22],37:[2,22]},{15:[1,33],19:43,20:44,21:45,22:46,23:47,24:48,25:[1,25],26:[1,26],27:[1,32],28:[1,29],29:[1,28],30:[1,27],31:37,32:38,33:39,34:40,35:41,36:42,38:[1,30],39:[1,31]},{17:[2,13],18:[2,13]},{1:[2,26],9:[2,26],10:[2,26],14:[2,26],15:[2,26],17:[2,26],37:[2,26]},{1:[2,24],9:[2,24],10:[2,24],14:[2,24],15:[2,24],17:[2,24],37:[2,24]},{17:[1,49],37:[1,50]},{17:[1,51],37:[1,52]},{17:[1,53],37:[1,54]},{17:[1,55],37:[1,56]},{17:[1,57],37:[1,58]},{17:[1,59],37:[1,60]},{17:[2,33],37:[2,33]},{17:[2,36],37:[2,36]},{17:[2,39],37:[2,39]},{17:[2,42],37:[2,42]},{17:[2,45],37:[2,45]},{17:[2,48],37:[2,48]},{1:[2,27],9:[2,27],10:[2,27],14:[2,27],15:[2,27],17:[2,27],37:[2,27]},{17:[2,35],19:61,25:[1,25],26:[1,26],37:[2,35]},{1:[2,28],9:[2,28],10:[2,28],14:[2,28],15:[2,28],17:[2,28],37:[2,28]},{17:[2,38],20:62,29:[1,63],30:[1,27],37:[2,38]},{1:[2,29],9:[2,29],10:[2,29],14:[2,29],15:[2,29],17:[2,29],37:[2,29]},{17:[2,41],21:64,28:[1,29],29:[1,65],37:[2,41]},{1:[2,30],9:[2,30],10:[2,30],14:[2,30],15:[2,30],17:[2,30],37:[2,30]},{17:[2,44],22:66,37:[2,44],38:[1,30],39:[1,31]},{1:[2,31],9:[2,31],10:[2,31],14:[2,31],15:[2,31],17:[2,31],37:[2,31]},{17:[2,47],23:67,27:[1,32],37:[2,47]},{1:[2,32],9:[2,32],10:[2,32],14:[2,32],15:[2,32],17:[2,32],37:[2,32]},{15:[1,33],17:[2,50],24:68,37:[2,50]},{17:[2,34],37:[2,34]},{17:[2,37],37:[2,37]},{20:35,29:[1,63],30:[1,27]},{17:[2,40],37:[2,40]},{21:36,28:[1,29],29:[1,65]},{17:[2,43],37:[2,43]},{17:[2,46],37:[2,46]},{17:[2,49],37:[2,49]}],
defaultActions: {},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};


function parseString(str) {
  var str = str.substr(1, str.length - 2);
  str = str.replace(/([^\\])\\0/g, "$1\0")
           .replace(/([^\\])\\n/g, "$1\n")
           .replace(/([^\\])\\t/g, "$1\t")
           .replace(/([^\\])\\r/g, "$1\r")
           .replace(/([^\\])\\"/g, "$1\"")
           .replace(/\\\\/g, "\\")
  return str;
}

function parseTripleString(str) {
  return str.substr(3, str.length - 6);
}

function deepValue(obj, path, value) {
  var tags = path.split("."), len = tags.length - 1;
  for (var i = 0; i < len; i++) {
    obj[tags[i]] = obj[tags[i]] || {};
    obj = obj[tags[i]];
  }
  if (value !== undefined)
    obj[tags[len]] = value;
  else
    return obj[tags[len]]
}

function set(instance, key, value) {
  instance = instance || new TomlInstance();
  instance.set(key, value);
  return instance;
}

function setCurrentGroup(instance, group) {
  instance = instance || new TomlInstance();
  instance.setCurrentGroup(group);
  return instance;
}

function TomlInstance() {
  this.data = {};
  this.currentGroup = null;
};

TomlInstance.prototype = {
  setCurrentGroup: function(group) {
    if (deepValue(this.data, group))
      throw new Error("Cannot overrite previously set key " + group + " with keygroup");
    this.currentGroup = group;
  },
  set: function(key, value) {
    if (this.currentGroup)
      key = this.currentGroup + '.' + key;
    deepValue(this.data, key, value);
  },
};
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 38
break;
case 2:return 39
break;
case 3:return 27
break;
case 4:return 25
break;
case 5:return 26
break;
case 6:return 12
break;
case 7:return 10
break;
case 8:return 30
break;
case 9:return 28
break;
case 10:return 29
break;
case 11:return 15
break;
case 12:return 17
break;
case 13:return 37
break;
case 14:return 14
break;
case 15:return 9
break;
}
},
rules: [/^(?:\s+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z\b))/,/^(?:"{3}(?:"{1,2}(?!")|[^\"])*"{3})/,/^(?:"([^"\\]|\\.)*")/,/^(?:=)/,/^(?:#.*)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:-)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:[^\"\s=\[\]]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = toml;
exports.Parser = toml.Parser;
exports.parse = function () { return toml.parse.apply(toml, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}